package br.nullexcept.mux.input;

import java.lang.reflect.Field;

public abstract class KeyEvent extends InputEvent {
    private static InputDevice keyboard;
    public static final int KEY_UNKNOWN = -1;
    public static final int KEY_SPACE = 32;
    public static final int KEY_APOSTROPHE = 39;
    public static final int KEY_COMMA = 44;
    public static final int KEY_MINUS = 45;
    public static final int KEY_PERIOD = 46;
    public static final int KEY_SLASH = 47;
    public static final int KEY_0 = 48;
    public static final int KEY_1 = 49;
    public static final int KEY_2 = 50;
    public static final int KEY_3 = 51;
    public static final int KEY_4 = 52;
    public static final int KEY_5 = 53;
    public static final int KEY_6 = 54;
    public static final int KEY_7 = 55;
    public static final int KEY_8 = 56;
    public static final int KEY_9 = 57;
    public static final int KEY_SEMICOLON = 59;
    public static final int KEY_EQUAL = 61;
    public static final int KEY_A = 65;
    public static final int KEY_B = 66;
    public static final int KEY_C = 67;
    public static final int KEY_D = 68;
    public static final int KEY_E = 69;
    public static final int KEY_F = 70;
    public static final int KEY_G = 71;
    public static final int KEY_H = 72;
    public static final int KEY_I = 73;
    public static final int KEY_J = 74;
    public static final int KEY_K = 75;
    public static final int KEY_L = 76;
    public static final int KEY_M = 77;
    public static final int KEY_N = 78;
    public static final int KEY_O = 79;
    public static final int KEY_P = 80;
    public static final int KEY_Q = 81;
    public static final int KEY_R = 82;
    public static final int KEY_S = 83;
    public static final int KEY_T = 84;
    public static final int KEY_U = 85;
    public static final int KEY_V = 86;
    public static final int KEY_W = 87;
    public static final int KEY_X = 88;
    public static final int KEY_Y = 89;
    public static final int KEY_Z = 90;
    public static final int KEY_LEFT_BRACKET = 91;
    public static final int KEY_BACKSLASH = 92;
    public static final int KEY_RIGHT_BRACKET = 93;
    public static final int KEY_GRAVE_ACCENT = 96;
    public static final int KEY_WORLD_1 = 161;
    public static final int KEY_WORLD_2 = 162;
    public static final int KEY_ESCAPE = 256;
    public static final int KEY_ENTER = 257;
    public static final int KEY_TAB = 258;
    public static final int KEY_BACKSPACE = 259;
    public static final int KEY_INSERT = 260;
    public static final int KEY_DELETE = 261;
    public static final int KEY_RIGHT = 262;
    public static final int KEY_LEFT = 263;
    public static final int KEY_DOWN = 264;
    public static final int KEY_UP = 265;
    public static final int KEY_PAGE_UP = 266;
    public static final int KEY_PAGE_DOWN = 267;
    public static final int KEY_HOME = 268;
    public static final int KEY_END = 269;
    public static final int KEY_CAPS_LOCK = 280;
    public static final int KEY_SCROLL_LOCK = 281;
    public static final int KEY_NUM_LOCK = 282;
    public static final int KEY_PRINT_SCREEN = 283;
    public static final int KEY_PAUSE = 284;
    public static final int KEY_F1 = 290;
    public static final int KEY_F2 = 291;
    public static final int KEY_F3 = 292;
    public static final int KEY_F4 = 293;
    public static final int KEY_F5 = 294;
    public static final int KEY_F6 = 295;
    public static final int KEY_F7 = 296;
    public static final int KEY_F8 = 297;
    public static final int KEY_F9 = 298;
    public static final int KEY_F10 = 299;
    public static final int KEY_F11 = 300;
    public static final int KEY_F12 = 301;
    public static final int KEY_F13 = 302;
    public static final int KEY_F14 = 303;
    public static final int KEY_F15 = 304;
    public static final int KEY_F16 = 305;
    public static final int KEY_F17 = 306;
    public static final int KEY_F18 = 307;
    public static final int KEY_F19 = 308;
    public static final int KEY_F20 = 309;
    public static final int KEY_F21 = 310;
    public static final int KEY_F22 = 311;
    public static final int KEY_F23 = 312;
    public static final int KEY_F24 = 313;
    public static final int KEY_F25 = 314;
    public static final int KEY_KP_0 = 320;
    public static final int KEY_KP_1 = 321;
    public static final int KEY_KP_2 = 322;
    public static final int KEY_KP_3 = 323;
    public static final int KEY_KP_4 = 324;
    public static final int KEY_KP_5 = 325;
    public static final int KEY_KP_6 = 326;
    public static final int KEY_KP_7 = 327;
    public static final int KEY_KP_8 = 328;
    public static final int KEY_KP_9 = 329;
    public static final int KEY_KP_DECIMAL = 330;
    public static final int KEY_KP_DIVIDE = 331;
    public static final int KEY_KP_MULTIPLY = 332;
    public static final int KEY_KP_SUBTRACT = 333;
    public static final int KEY_KP_ADD = 334;
    public static final int KEY_KP_ENTER = 335;
    public static final int KEY_KP_EQUAL = 336;
    public static final int KEY_LEFT_SHIFT = 340;
    public static final int KEY_LEFT_CONTROL = 341;
    public static final int KEY_LEFT_ALT = 342;
    public static final int KEY_LEFT_SUPER = 343;
    public static final int KEY_RIGHT_SHIFT = 344;
    public static final int KEY_RIGHT_CONTROL = 345;
    public static final int KEY_RIGHT_ALT = 346;
    public static final int KEY_RIGHT_SUPER = 347;
    public static final int KEY_MENU = 348;
    public static final int KEY_LAST = 348;

    public static final int MOD_SHIFT = 1;
    public static final int MOD_CONTROL = 2;
    public static final int MOD_ALT = 4;
    public static final int MOD_SUPER = 8;
    public static final int MOD_CAPS_LOCK = 16;
    public static final int MOD_NUM_LOCK = 32;

    public static int ACTION_DOWN = 0;
    public static int ACTION_UP = 1;

    public abstract int getKeyCode();
    public abstract int getAction();
    public abstract int getModifiers();

    public boolean hasCtrl(){
        return (getModifiers() & MOD_CONTROL) != 0;
    }

    public boolean hasShift(){
        return (getModifiers() & MOD_SHIFT) != 0;
    }

    public boolean hasSuper(){
        return (getModifiers() & MOD_SUPER) != 0;
    }

    public boolean hasAlt() {
        return (getModifiers() & MOD_ALT) != 0;
    }

    public static String getKeyName(int code) {
        switch(code) {
            case KEY_SPACE: return "SPACE";
            case KEY_APOSTROPHE: return "APOSTROPHE";
            case KEY_COMMA: return "COMMA";
            case KEY_MINUS: return "MINUS";
            case KEY_PERIOD: return "PERIOD";
            case KEY_SLASH: return "SLASH";
            case KEY_0: return "0";
            case KEY_1: return "1";
            case KEY_2: return "2";
            case KEY_3: return "3";
            case KEY_4: return "4";
            case KEY_5: return "5";
            case KEY_6: return "6";
            case KEY_7: return "7";
            case KEY_8: return "8";
            case KEY_9: return "9";
            case KEY_SEMICOLON: return "SEMICOLON";
            case KEY_EQUAL: return "EQUAL";
            case KEY_A: return "A";
            case KEY_B: return "B";
            case KEY_C: return "C";
            case KEY_D: return "D";
            case KEY_E: return "E";
            case KEY_F: return "F";
            case KEY_G: return "G";
            case KEY_H: return "H";
            case KEY_I: return "I";
            case KEY_J: return "J";
            case KEY_K: return "K";
            case KEY_L: return "L";
            case KEY_M: return "M";
            case KEY_N: return "N";
            case KEY_O: return "O";
            case KEY_P: return "P";
            case KEY_Q: return "Q";
            case KEY_R: return "R";
            case KEY_S: return "S";
            case KEY_T: return "T";
            case KEY_U: return "U";
            case KEY_V: return "V";
            case KEY_W: return "W";
            case KEY_X: return "X";
            case KEY_Y: return "Y";
            case KEY_Z: return "Z";
            case KEY_LEFT_BRACKET: return "LEFT_BRACKET";
            case KEY_BACKSLASH: return "BACKSLASH";
            case KEY_RIGHT_BRACKET: return "RIGHT_BRACKET";
            case KEY_GRAVE_ACCENT: return "GRAVE_ACCENT";
            case KEY_WORLD_1: return "WORLD_1";
            case KEY_WORLD_2: return "WORLD_2";
            case KEY_ESCAPE: return "ESCAPE";
            case KEY_ENTER: return "ENTER";
            case KEY_TAB: return "TAB";
            case KEY_BACKSPACE: return "BACKSPACE";
            case KEY_INSERT: return "INSERT";
            case KEY_DELETE: return "DELETE";
            case KEY_RIGHT: return "RIGHT";
            case KEY_LEFT: return "LEFT";
            case KEY_DOWN: return "DOWN";
            case KEY_UP: return "UP";
            case KEY_PAGE_UP: return "PAGE_UP";
            case KEY_PAGE_DOWN: return "PAGE_DOWN";
            case KEY_HOME: return "HOME";
            case KEY_END: return "END";
            case KEY_CAPS_LOCK: return "CAPS_LOCK";
            case KEY_SCROLL_LOCK: return "SCROLL_LOCK";
            case KEY_NUM_LOCK: return "NUM_LOCK";
            case KEY_PRINT_SCREEN: return "PRINT_SCREEN";
            case KEY_PAUSE: return "PAUSE";
            case KEY_F1: return "F1";
            case KEY_F2: return "F2";
            case KEY_F3: return "F3";
            case KEY_F4: return "F4";
            case KEY_F5: return "F5";
            case KEY_F6: return "F6";
            case KEY_F7: return "F7";
            case KEY_F8: return "F8";
            case KEY_F9: return "F9";
            case KEY_F10: return "F10";
            case KEY_F11: return "F11";
            case KEY_F12: return "F12";
            case KEY_F13: return "F13";
            case KEY_F14: return "F14";
            case KEY_F15: return "F15";
            case KEY_F16: return "F16";
            case KEY_F17: return "F17";
            case KEY_F18: return "F18";
            case KEY_F19: return "F19";
            case KEY_F20: return "F20";
            case KEY_F21: return "F21";
            case KEY_F22: return "F22";
            case KEY_F23: return "F23";
            case KEY_F24: return "F24";
            case KEY_F25: return "F25";
            case KEY_KP_0: return "KP_0";
            case KEY_KP_1: return "KP_1";
            case KEY_KP_2: return "KP_2";
            case KEY_KP_3: return "KP_3";
            case KEY_KP_4: return "KP_4";
            case KEY_KP_5: return "KP_5";
            case KEY_KP_6: return "KP_6";
            case KEY_KP_7: return "KP_7";
            case KEY_KP_8: return "KP_8";
            case KEY_KP_9: return "KP_9";
            case KEY_KP_DECIMAL: return "KP_DECIMAL";
            case KEY_KP_DIVIDE: return "KP_DIVIDE";
            case KEY_KP_MULTIPLY: return "KP_MULTIPLY";
            case KEY_KP_SUBTRACT: return "KP_SUBTRACT";
            case KEY_KP_ADD: return "KP_ADD";
            case KEY_KP_ENTER: return "KP_ENTER";
            case KEY_KP_EQUAL: return "KP_EQUAL";
            case KEY_LEFT_SHIFT: return "LEFT_SHIFT";
            case KEY_LEFT_CONTROL: return "LEFT_CONTROL";
            case KEY_LEFT_ALT: return "LEFT_ALT";
            case KEY_LEFT_SUPER: return "LEFT_SUPER";
            case KEY_RIGHT_SHIFT: return "RIGHT_SHIFT";
            case KEY_RIGHT_CONTROL: return "RIGHT_CONTROL";
            case KEY_RIGHT_ALT: return "RIGHT_ALT";
            case KEY_RIGHT_SUPER: return "RIGHT_SUPER";
            case KEY_MENU: return "MENU";
        }
        return "UNKNOWN";
    }
}
